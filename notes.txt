git:
	- remember credentials on a machine, run the line:
		git config --global credential.helper store
	- reset ALL local changes
		get reset --hard

python:
    get current directory
        import os
        cwd = os.getcwd()
    change working directory
        os.chdir(path)
    dictionary of all local variables
        locals()

pandas:
    df.dtypes
    df.describe()
    df.head()
    df.tail()
    df.columns
    df.loc[df['Error'] == 1] # view all errors in a dataframe
    df['column'].unique()
    df.sort_values(by="Datetime", ascending=True) # sort by datetime
    new_df = df[df["Error"] == False] # new df without any errors
    df.shape
    df.drop(columns=['col1', 'col2', 'etc...'])
    df[['col1', 'col2', 'etc...']] # will only return these columns 

numpy:
    numpy array:
        array.shape
        array.dtype
        array.strides
        array.data # the memory address

matplotlib:
    from matplotlib import pyplot as plt
    from matplotlib import dates as mpl_dates
    from pandas.plotting import register_matplotlib_converters
    register_matplotlib_converters()
    plt.plot_date(x, y)
    plt.plot(x, y, 'xx') # xx is the style of the line (b- would be blue line, ro is red circles, etc)
    plt.ylabel('y label')
    plt.xlabel('x label')
    plt.axis([0, 6, 0, 20]) # set your axis here with a list [x-low, x-high, y-low, y-high]
    plt.show()

useful imports:
import numpy
import matplotlib.pyplot as plt
import pandas
import math
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error

Keras:
    conda install keras

regression:

Independant variable: X axis
Dependant variable: Y axis
    - outcome?
    - dependant on the other variable

It seems that X is going to be time. Y would be everything else, price, volume, etc

Might need to use multiple regression because of each of the Y values.

Logistic Regression predicts something either True or False instead of something continuous.
    - Typically used for classification
    - Possible someting like:
        - Price will increase by 100 based on: Price, Volume, Time
        - Price will not increase by 100 based on: Price, Volume, Time
    - Need to research *Maximum Likelyhood*

Stepwise Regression might be a better choice
    - best when we deal with multiple independant variables

Supervised learning (labling your data)
Unsupervised learning (not sure what you are looking for in your data)

Supervised Learning + Discrete = classification or categorization
Supervised Learning + Continuous = Regression
Unsupervised Learning + Discrete = Clustering
Unsupervised Learning + Continuous = Dimensionality Reduction

ARIMA - used for predicting futuristic time-related predictions
LSTM - (Long Short Term Memory), great for retianing long term memory

Neural Networks:
    - feed-forward
    - recurrent
    - convolutional
    - modular

TODO:


